# -*- coding: utf-8 -*-
"""Project02 Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KpwY_D5vHuPteE6Ev_LlQEc05-kdwRLe
"""

# importing the libraries
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

# Loading the dataset
diabetes_dataset=pd.read_csv("/content/diabetes.csv")

diabetes_dataset.head()

# no of rows and columns
diabetes_dataset.shape

# statistical measures
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()
# non =500
# diabetic =268

diabetes_dataset.groupby('Outcome').mean()

# seperating the data and the label
X=diabetes_dataset.drop(columns='Outcome',axis=1)
Y= diabetes_dataset['Outcome']

print(X)

print(Y)

# data standardization
scaler = StandardScaler()

scaler.fit(X)

standard_data=scaler.transform(X)  #putting all the values in similar range

print(standard_data)

X= standard_data
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

# spliting the data into training and testing
X_train, X_test, Y_train, Y_test=train_test_split(X,Y, test_size=0.2,stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

classifier=svm.SVC(kernel='linear')  #loading the model into the variable

# training the support vector machine model
classifier.fit(X_train, Y_train)

# model evaluation
X_train_prediction= classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print("The trainning data accuracy: ", training_data_accuracy)

# accuracy score of the test data
X_test_predict=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_predict, Y_test)

print("The test data accuracy: ", test_data_accuracy)

"""Making the predictive system"""

# almost same for every project to make the predictive system
input_data=(1,103,30,38,83,43.3,0.183,33)
# changing the input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)
# reshaping the data to avoid the confusion as we want output for just one data point
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
# standardizing the input data
std_data=scaler.transform(input_data_reshaped)
prediction=classifier.predict(std_data)
if(prediction==1):
  print("Diabetic")
else:
  print("non diabetic")

